import { Repository } from 'typeorm';
import { BanEntity } from '../entities/ban.entity';
import { Channel } from '../entities/channel.entity';
import { Guild } from '../entities/guild.entity';
import { Member } from '../entities/member.entity';
import { User } from '../entities/user.entity';
import { GuildInput } from '../models/input/GuildInput';
import { GuildMemberInput } from '../models/input/GuildMemberInput';
import { GuildResponse } from '../models/response/GuildResponse';
import { MemberResponse } from '../models/response/MemberResponse';
import { SocketService } from '../socket/socket.service';
import { BufferFile } from '../types/BufferFile';
export declare class GuildService {
    private guildRepository;
    private channelRepository;
    private userRepository;
    private memberRepository;
    private banRepository;
    private socketService;
    constructor(guildRepository: Repository<Guild>, channelRepository: Repository<Channel>, userRepository: Repository<User>, memberRepository: Repository<Member>, banRepository: Repository<BanEntity>, socketService: SocketService);
    getGuildMembers(guildId: string): Promise<MemberResponse[]>;
    getUserGuilds(userId: string): Promise<GuildResponse[]>;
    createGuild(name: string, userId: string): Promise<GuildResponse>;
    generateInviteLink(guildId: string, isPermanent?: boolean): Promise<string>;
    invalidateGuildInvites(guildId: string, userId: string): Promise<boolean>;
    joinGuild(token: string, userId: string): Promise<GuildResponse>;
    leaveGuild(userId: string, guildId: string): Promise<boolean>;
    editGuild(userId: string, guildId: string, input: GuildInput, image: BufferFile): Promise<boolean>;
    deleteGuild(userId: string, guildId: string): Promise<boolean>;
    changeMemberSettings(userId: string, guildId: string, input: GuildMemberInput): Promise<boolean>;
    getMemberSettings(userId: string, guildId: string): Promise<GuildMemberInput>;
    kickMember(userId: string, guildId: string, memberId: string): Promise<boolean>;
    banMember(userId: string, guildId: string, memberId: string): Promise<boolean>;
    unbanUser(userId: string, guildId: string, memberId: string): Promise<boolean>;
    getBannedUsers(userId: string, guildId: string): Promise<MemberResponse[]>;
    private checkGuildOwnership;
    checkGuildLimit(userId: string): Promise<void>;
    checkIfBanned(userId: string, guildId: string): Promise<void>;
    toGuildResponse(guild: Guild, defaultChannelId: string): GuildResponse;
}
